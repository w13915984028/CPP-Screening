#include <iostream>
#include <string>
#include <vector>

using namespace std;


// Complete the isValid function below.
string isValid(string s) {

    vector<int> vec;
    vec.resize(26);
    for(auto x=s.begin(); x!=s.end(); x++)
    {
        vec[*x-'a']++;
    }

    int min =0xfffffff, max =0;
    
    int charNum = 0;
    for (auto i:vec)
    {
        if (i>0)
        {
            if (min > i)
                min = i;
            if (max < i)
                max = i;
            charNum++;
        }
    }

    //cout<<"min="<<min<<";max="<<max<<endl;    
    if (min == max)
        return "YES";


    int num1=0, num2=0;
    for (auto x: vec)
    {
        if (x == min)
            num1++;
        if (x == max)
            num2++;
    }
    
    //cout<<"num1="<<num1<<";num2="<<num2<<endl;     
    
    if ((num1 + num2) != charNum)
        return "NO";
        
    if ((num2 == 1) && (max - min ==1))
        return "YES";
        
    if ((num1 == 1) && (min == 1))
        return "YES";
        

    return "NO";

}


int get_num(int n)
{
    int k = 0;
    if (n%2 ==0)
        return ((n+1)*(n/2));
    else
    {
        k = (n-1)/2;
        return ((n+1)*k+(n+1)/2);
    }
        
}

// Complete the substrCount function below.
long substrCount(int n, string s) {

    char c=s[0];
    int sum = n;
    
    int i = 1;
    int cnt = 1;
    //bool same = true;
    while(i<n)
    {
        if (s[i] ==c)
        {
            cnt++;
            i++;
        }else
        {
            // find some
            if(cnt > 1)
            {
                sum += get_num(cnt) -cnt;
            
            
                //check peer
                int k=0;
                int tt = 0;
                for (; k<cnt; k++)
                {
                    tt = i+1+k;
                    if(tt>=n)
                        break;
                    if(s[tt]!=c)
                        break;
                }
                
                // find one/more
                if (k)
                {
                    sum +=k;
                }
                // move ahead
                c = s[i];
                i++;
                cnt =1;
            }else if (cnt == 1)
            {
                if (s[i-1] == s[i+1])
                {
                    sum++;
                }
                // move ahead
                c = s[i];
                i++;            
                cnt =1;
            }
        }
    }

    // the end part
    if(cnt > 1)
    {
        //cout<<"cnt:"<<cnt<<" "<<(2<<(cnt-2)) -1-cnt<<endl;
        sum += get_num(cnt)-cnt;
    }
    
    return sum;
}



// Complete the whatFlavors function below.
void whatFlavors(vector<int> cost, int money) {

    vector<int> bk=cost;
    sort(bk.begin(), bk.end());
    auto y = bk.begin();
    int f1 = 0;
    int f2 = 0;

    for (auto x=bk.begin(); x!=bk.end(); x++)
    {
        int left = money - *x;
        if (left<=0)
            break; 

        y = std::find(x, bk.end(),left);

        if(y != bk.end())
        {
            f1 = *x;
            f2 = *y;            
            break;
        }
    }

    //cout<<"check res"<<endl;
    if (y!=bk.end())
    {
        if (f1<f2)
        {
            cout<<std::distance(cost.begin(), std::find(cost.begin(),cost.end(), f1))+1<<" ";
            cout<<std::distance(cost.begin(), std::find(cost.begin(),cost.end(), f2))+1<<endl;
        }else if (f1 > f2)
        {
            cout<<std::distance(cost.begin(), std::find(cost.begin(),cost.end(), f2))+1<<" ";
            cout<<std::distance(cost.begin(), std::find(cost.begin(),cost.end(), f1))+1<<endl;
        } else {
            auto z = std::find(cost.begin(),cost.end(), f1);
            cout<<std::distance(cost.begin(), z)+1;
            cout<<std::distance(cost.begin(), std::find(z+1,cost.end(), f2))+1;
        }

    }
}

int main()
{

    cout<<isValid("a")<<endl;
    cout<<isValid("abbac")<<endl;
    cout<<isValid("abbaccc")<<endl;
    cout<<isValid("aaaaaab")<<endl;
    cout<<isValid("aaaacaab")<<endl;
    
    
    return 0;
}
